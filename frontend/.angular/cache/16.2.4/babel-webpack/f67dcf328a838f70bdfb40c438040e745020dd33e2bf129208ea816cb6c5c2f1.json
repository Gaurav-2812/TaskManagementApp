{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CrudService {\n  constructor(http) {\n    this.http = http;\n    // Update the service URL to point to your backend server\n    this.serviceURL = \"http://localhost:4000\";\n  }\n  addTask(task) {\n    return this.http.post(`${this.serviceURL}/tasks`, task);\n  }\n  getAllTasks() {\n    return this.http.get(`${this.serviceURL}/tasks`);\n  }\n  deleteTask(task) {\n    return this.http.delete(`${this.serviceURL}/tasks/${task._id}`);\n  }\n  editTask(task) {\n    return this.http.put(`${this.serviceURL}/tasks/${task._id}`, task);\n  }\n  completeTask(task) {\n    task.status = true; // Mark the task as completed\n    return this.http.put(`${this.serviceURL}/tasks/complete/${task._id}`, task);\n  }\n  incompleteTask(task) {\n    task.status = false; // Mark the task as incomplete\n    return this.http.put(`${this.serviceURL}/tasks/incomplete/${task._id}`, task);\n  }\n  getCompletedTasks() {\n    return this.http.get(`${this.serviceURL}/tasks/completed`);\n  }\n  getIncompleteTasks() {\n    return this.http.get(`${this.serviceURL}/tasks/incomplete`);\n  }\n  deleteCompletedTask(task) {\n    return this.http.delete(`${this.serviceURL}/tasks/complete/${task._id}`);\n  }\n  deleteIncompleteTask(task) {\n    return this.http.delete(`${this.serviceURL}/tasks/incomplete/${task._id}`);\n  }\n  static #_ = this.ɵfac = function CrudService_Factory(t) {\n    return new (t || CrudService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CrudService,\n    factory: CrudService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["CrudService","constructor","http","serviceURL","addTask","task","post","getAllTasks","get","deleteTask","delete","_id","editTask","put","completeTask","status","incompleteTask","getCompletedTasks","getIncompleteTasks","deleteCompletedTask","deleteIncompleteTask","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\sgaut\\Documents\\tolist\\to-dolist\\src\\app\\service\\crud.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Task } from '../model/task';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudService {\n\n  serviceURL: string;\n\n  constructor(private http: HttpClient) { \n    // Update the service URL to point to your backend server\n    this.serviceURL = \"http://localhost:4000\";\n  }\n\n  addTask(task: Task): Observable<Task> {\n    return this.http.post<Task>(`${this.serviceURL}/tasks`, task);\n  }\n\n  getAllTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(`${this.serviceURL}/tasks`);\n  }\n\n  deleteTask(task: Task): Observable<Task> {\n    return this.http.delete<Task>(`${this.serviceURL}/tasks/${task._id}`);\n  }\n  \n  editTask(task: Task): Observable<Task> {\n    return this.http.put<Task>(`${this.serviceURL}/tasks/${task._id}`, task);\n  }\n\n  completeTask(task: Task): Observable<Task> {\n    task.status = true; // Mark the task as completed\n    return this.http.put<Task>(`${this.serviceURL}/tasks/complete/${task._id}`, task);\n  }\n\n  incompleteTask(task: Task): Observable<Task> {\n    task.status = false; // Mark the task as incomplete\n    return this.http.put<Task>(`${this.serviceURL}/tasks/incomplete/${task._id}`, task);\n  }\n\n  getCompletedTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(`${this.serviceURL}/tasks/completed`);\n  }\n\n  getIncompleteTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(`${this.serviceURL}/tasks/incomplete`);\n  }\n\n  deleteCompletedTask(task: Task): Observable<Task> {\n    return this.http.delete<Task>(`${this.serviceURL}/tasks/complete/${task._id}`);\n  }\n\n  deleteIncompleteTask(task: Task): Observable<Task> {\n    return this.http.delete<Task>(`${this.serviceURL}/tasks/incomplete/${task._id}`);\n  }\n}"],"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACtB;IACA,IAAI,CAACC,UAAU,GAAG,uBAAuB;EAC3C;EAEAC,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAO,GAAG,IAAI,CAACH,UAAU,QAAQ,EAAEE,IAAI,CAAC;EAC/D;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAS,GAAG,IAAI,CAACL,UAAU,QAAQ,CAAC;EAC1D;EAEAM,UAAUA,CAACJ,IAAU;IACnB,OAAO,IAAI,CAACH,IAAI,CAACQ,MAAM,CAAO,GAAG,IAAI,CAACP,UAAU,UAAUE,IAAI,CAACM,GAAG,EAAE,CAAC;EACvE;EAEAC,QAAQA,CAACP,IAAU;IACjB,OAAO,IAAI,CAACH,IAAI,CAACW,GAAG,CAAO,GAAG,IAAI,CAACV,UAAU,UAAUE,IAAI,CAACM,GAAG,EAAE,EAAEN,IAAI,CAAC;EAC1E;EAEAS,YAAYA,CAACT,IAAU;IACrBA,IAAI,CAACU,MAAM,GAAG,IAAI,CAAC,CAAC;IACpB,OAAO,IAAI,CAACb,IAAI,CAACW,GAAG,CAAO,GAAG,IAAI,CAACV,UAAU,mBAAmBE,IAAI,CAACM,GAAG,EAAE,EAAEN,IAAI,CAAC;EACnF;EAEAW,cAAcA,CAACX,IAAU;IACvBA,IAAI,CAACU,MAAM,GAAG,KAAK,CAAC,CAAC;IACrB,OAAO,IAAI,CAACb,IAAI,CAACW,GAAG,CAAO,GAAG,IAAI,CAACV,UAAU,qBAAqBE,IAAI,CAACM,GAAG,EAAE,EAAEN,IAAI,CAAC;EACrF;EAEAY,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACf,IAAI,CAACM,GAAG,CAAS,GAAG,IAAI,CAACL,UAAU,kBAAkB,CAAC;EACpE;EAEAe,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAAChB,IAAI,CAACM,GAAG,CAAS,GAAG,IAAI,CAACL,UAAU,mBAAmB,CAAC;EACrE;EAEAgB,mBAAmBA,CAACd,IAAU;IAC5B,OAAO,IAAI,CAACH,IAAI,CAACQ,MAAM,CAAO,GAAG,IAAI,CAACP,UAAU,mBAAmBE,IAAI,CAACM,GAAG,EAAE,CAAC;EAChF;EAEAS,oBAAoBA,CAACf,IAAU;IAC7B,OAAO,IAAI,CAACH,IAAI,CAACQ,MAAM,CAAO,GAAG,IAAI,CAACP,UAAU,qBAAqBE,IAAI,CAACM,GAAG,EAAE,CAAC;EAClF;EAAC,QAAAU,CAAA,G;qBAjDUrB,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX1B,WAAW;IAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
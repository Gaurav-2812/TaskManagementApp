{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  checkAuthStatus() {\n    // Make an API request to check the authentication status on the backend\n    return this.http.get(`${this.authURL}/check-auth-status`);\n  }\n  constructor(http) {\n    this.http = http;\n    this.authURL = 'http://localhost:4000'; // Replace with your backend URL\n  }\n\n  register(username, password) {\n    return this.http.post(`${this.authURL}/register`, {\n      username,\n      password\n    });\n  }\n  login(username, password) {\n    return this.http.post(`${this.authURL}/login`, {\n      username,\n      password\n    });\n  }\n  logout() {\n    return this.http.get(`${this.authURL}/logout`);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","checkAuthStatus","http","get","authURL","constructor","register","username","password","post","login","logout","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\sgaut\\Documents\\tolist\\to-dolist\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  checkAuthStatus(): Observable<boolean> {\n    // Make an API request to check the authentication status on the backend\n    return this.http.get<boolean>(`${this.authURL}/check-auth-status`);\n  }\n  private authURL = 'http://localhost:4000'; // Replace with your backend URL\n\n  constructor(private http: HttpClient) {}\n\n  register(username: string, password: string): Observable<any> {\n    return this.http.post<any>(`${this.authURL}/register`, { username, password });\n  }\n\n  login(username: string, password: string): Observable<any> {\n    return this.http.post<any>(`${this.authURL}/login`, { username, password });\n  }\n\n  logout(): Observable<any> {\n    return this.http.get<any>(`${this.authURL}/logout`);\n  }\n  \n}\n"],"mappings":";;AAOA,OAAM,MAAOA,WAAW;EACtBC,eAAeA,CAAA;IACb;IACA,OAAO,IAAI,CAACC,IAAI,CAACC,GAAG,CAAU,GAAG,IAAI,CAACC,OAAO,oBAAoB,CAAC;EACpE;EAGAC,YAAoBH,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAE,OAAO,GAAG,uBAAuB,CAAC,CAAC;EAEJ;;EAEvCE,QAAQA,CAACC,QAAgB,EAAEC,QAAgB;IACzC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAM,GAAG,IAAI,CAACL,OAAO,WAAW,EAAE;MAAEG,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EAChF;EAEAE,KAAKA,CAACH,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAM,GAAG,IAAI,CAACL,OAAO,QAAQ,EAAE;MAAEG,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EAC7E;EAEAG,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACT,IAAI,CAACC,GAAG,CAAM,GAAG,IAAI,CAACC,OAAO,SAAS,CAAC;EACrD;EAAC,QAAAQ,CAAA,G;qBAnBUZ,WAAW,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXjB,WAAW;IAAAkB,OAAA,EAAXlB,WAAW,CAAAmB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
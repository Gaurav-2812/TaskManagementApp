{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class CrudService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.isAuthenticated = false;\n    // Check the user's authentication status\n    this.authService.checkAuthStatus().subscribe(authenticated => {\n      this.isAuthenticated = authenticated;\n    }, error => {\n      console.error(error);\n    });\n  }\n  addTask(task) {\n    return this.http.post(`${this.serviceURL}/tasks`, task);\n  }\n  getAllTasks() {\n    return this.http.get(`${this.serviceURL}/tasks`);\n  }\n  deleteTask(task) {\n    return this.http.delete(`${this.serviceURL}/tasks/${task._id}`);\n  }\n  editTask(task) {\n    return this.http.put(`${this.serviceURL}/tasks/${task._id}`, task);\n  }\n  completeTask(task) {\n    task.status = true; // Mark the task as completed\n    return this.http.put(`${this.serviceURL}/tasks/complete/${task._id}`, task);\n  }\n  incompleteTask(task) {\n    task.status = false; // Mark the task as incomplete\n    return this.http.put(`${this.serviceURL}/tasks/incomplete/${task._id}`, task);\n  }\n  getCompletedTasks() {\n    return this.http.get(`${this.serviceURL}/tasks/completed`);\n  }\n  getIncompleteTasks() {\n    return this.http.get(`${this.serviceURL}/tasks/incomplete`);\n  }\n  deleteCompletedTask(task) {\n    return this.http.delete(`${this.serviceURL}/tasks/complete/${task._id}`);\n  }\n  deleteIncompleteTask(task) {\n    return this.http.delete(`${this.serviceURL}/tasks/incomplete/${task._id}`);\n  }\n  static #_ = this.ɵfac = function CrudService_Factory(t) {\n    return new (t || CrudService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CrudService,\n    factory: CrudService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["CrudService","constructor","http","authService","isAuthenticated","checkAuthStatus","subscribe","authenticated","error","console","addTask","task","post","serviceURL","getAllTasks","get","deleteTask","delete","_id","editTask","put","completeTask","status","incompleteTask","getCompletedTasks","getIncompleteTasks","deleteCompletedTask","deleteIncompleteTask","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\sgaut\\Documents\\tolist\\to-dolist\\src\\app\\service\\crud.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Task } from '../model/task';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudService {\n\n  serviceURL!: string;\n  isAuthenticated: boolean = false;\n\n  constructor(private http: HttpClient, private authService: AuthService) {\n    // Check the user's authentication status\n    this.authService.checkAuthStatus().subscribe(\n      (authenticated) => {\n        this.isAuthenticated = authenticated;\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  }\n\n  addTask(task: Task): Observable<Task> {\n    return this.http.post<Task>(`${this.serviceURL}/tasks`, task);\n  }\n\n  getAllTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(`${this.serviceURL}/tasks`);\n  }\n\n  deleteTask(task: Task): Observable<Task> {\n    return this.http.delete<Task>(`${this.serviceURL}/tasks/${task._id}`);\n  }\n  \n  editTask(task: Task): Observable<Task> {\n    return this.http.put<Task>(`${this.serviceURL}/tasks/${task._id}`, task);\n  }\n\n  completeTask(task: Task): Observable<Task> {\n    task.status = true; // Mark the task as completed\n    return this.http.put<Task>(`${this.serviceURL}/tasks/complete/${task._id}`, task);\n  }\n\n  incompleteTask(task: Task): Observable<Task> {\n    task.status = false; // Mark the task as incomplete\n    return this.http.put<Task>(`${this.serviceURL}/tasks/incomplete/${task._id}`, task);\n  }\n\n  getCompletedTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(`${this.serviceURL}/tasks/completed`);\n  }\n\n  getIncompleteTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(`${this.serviceURL}/tasks/incomplete`);\n  }\n\n  deleteCompletedTask(task: Task): Observable<Task> {\n    return this.http.delete<Task>(`${this.serviceURL}/tasks/complete/${task._id}`);\n  }\n\n  deleteIncompleteTask(task: Task): Observable<Task> {\n    return this.http.delete<Task>(`${this.serviceURL}/tasks/incomplete/${task._id}`);\n  }\n}\n"],"mappings":";;;AASA,OAAM,MAAOA,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IAFzD,KAAAC,eAAe,GAAY,KAAK;IAG9B;IACA,IAAI,CAACD,WAAW,CAACE,eAAe,EAAE,CAACC,SAAS,CACzCC,aAAa,IAAI;MAChB,IAAI,CAACH,eAAe,GAAGG,aAAa;IACtC,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACH;EAEAE,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAO,GAAG,IAAI,CAACC,UAAU,QAAQ,EAAEF,IAAI,CAAC;EAC/D;EAEAG,WAAWA,CAAA;IACT,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAS,GAAG,IAAI,CAACF,UAAU,QAAQ,CAAC;EAC1D;EAEAG,UAAUA,CAACL,IAAU;IACnB,OAAO,IAAI,CAACT,IAAI,CAACe,MAAM,CAAO,GAAG,IAAI,CAACJ,UAAU,UAAUF,IAAI,CAACO,GAAG,EAAE,CAAC;EACvE;EAEAC,QAAQA,CAACR,IAAU;IACjB,OAAO,IAAI,CAACT,IAAI,CAACkB,GAAG,CAAO,GAAG,IAAI,CAACP,UAAU,UAAUF,IAAI,CAACO,GAAG,EAAE,EAAEP,IAAI,CAAC;EAC1E;EAEAU,YAAYA,CAACV,IAAU;IACrBA,IAAI,CAACW,MAAM,GAAG,IAAI,CAAC,CAAC;IACpB,OAAO,IAAI,CAACpB,IAAI,CAACkB,GAAG,CAAO,GAAG,IAAI,CAACP,UAAU,mBAAmBF,IAAI,CAACO,GAAG,EAAE,EAAEP,IAAI,CAAC;EACnF;EAEAY,cAAcA,CAACZ,IAAU;IACvBA,IAAI,CAACW,MAAM,GAAG,KAAK,CAAC,CAAC;IACrB,OAAO,IAAI,CAACpB,IAAI,CAACkB,GAAG,CAAO,GAAG,IAAI,CAACP,UAAU,qBAAqBF,IAAI,CAACO,GAAG,EAAE,EAAEP,IAAI,CAAC;EACrF;EAEAa,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACtB,IAAI,CAACa,GAAG,CAAS,GAAG,IAAI,CAACF,UAAU,kBAAkB,CAAC;EACpE;EAEAY,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACvB,IAAI,CAACa,GAAG,CAAS,GAAG,IAAI,CAACF,UAAU,mBAAmB,CAAC;EACrE;EAEAa,mBAAmBA,CAACf,IAAU;IAC5B,OAAO,IAAI,CAACT,IAAI,CAACe,MAAM,CAAO,GAAG,IAAI,CAACJ,UAAU,mBAAmBF,IAAI,CAACO,GAAG,EAAE,CAAC;EAChF;EAEAS,oBAAoBA,CAAChB,IAAU;IAC7B,OAAO,IAAI,CAACT,IAAI,CAACe,MAAM,CAAO,GAAG,IAAI,CAACJ,UAAU,qBAAqBF,IAAI,CAACO,GAAG,EAAE,CAAC;EAClF;EAAC,QAAAU,CAAA,G;qBAzDU5B,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXnC,WAAW;IAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
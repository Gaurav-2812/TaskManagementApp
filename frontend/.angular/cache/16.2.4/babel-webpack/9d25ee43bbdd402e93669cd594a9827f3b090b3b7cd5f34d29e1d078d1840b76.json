{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CrudService {\n  constructor(http) {\n    this.http = http;\n    // Update the service URL to point to your backend server\n    this.serviceURL = \"http://localhost:4000/tasks\";\n  }\n  addTask(task) {\n    return this.http.post(`${this.serviceURL}`, task);\n  }\n  // getAllTasks(): Observable<Task[]> {\n  //   return this.http.get<Task[]>(`${this.serviceURL}`);\n  // }\n  deleteTask(task) {\n    return this.http.delete(`${this.serviceURL}/${task._id}`);\n  }\n  editTask(task) {\n    return this.http.put(`${this.serviceURL}/${task._id}`, task);\n  }\n  completeTask(task) {\n    task.status = true; // Mark the task as completed\n    return this.editTask(task); // Send a PUT request to update the task\n  }\n\n  incompleteTask(task) {\n    task.status = false; // Mark the task as incomplete\n    return this.editTask(task); // Send a PUT request to update the task\n  }\n\n  getCompletedTasks() {\n    return this.http.get(`${this.serviceURL}?status=true`);\n  }\n  getIncompleteTasks() {\n    return this.http.get(`${this.serviceURL}?status=false`);\n  }\n  deleteCompletedTask(task) {\n    return this.http.delete(`${this.serviceURL}/${task._id}`);\n  }\n  // Function to delete an incomplete task\n  deleteIncompleteTask(task) {\n    return this.http.delete(`${this.serviceURL}/${task._id}`);\n  }\n  static #_ = this.ɵfac = function CrudService_Factory(t) {\n    return new (t || CrudService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CrudService,\n    factory: CrudService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["CrudService","constructor","http","serviceURL","addTask","task","post","deleteTask","delete","_id","editTask","put","completeTask","status","incompleteTask","getCompletedTasks","get","getIncompleteTasks","deleteCompletedTask","deleteIncompleteTask","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\sgaut\\Documents\\tolist\\to-dolist\\src\\app\\service\\crud.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Task } from '../model/task';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudService {\n\n  serviceURL: string;\n\n  constructor(private http: HttpClient) { \n    // Update the service URL to point to your backend server\n    this.serviceURL = \"http://localhost:4000/tasks\";\n  }\n\n  addTask(task: Task): Observable<Task> {\n    return this.http.post<Task>(`${this.serviceURL}`, task);\n  }\n\n  // getAllTasks(): Observable<Task[]> {\n  //   return this.http.get<Task[]>(`${this.serviceURL}`);\n  // }\n\n  deleteTask(task: Task): Observable<Task> {\n    return this.http.delete<Task>(`${this.serviceURL}/${task._id}`);\n  }\n  \n  editTask(task: Task): Observable<Task> {\n    return this.http.put<Task>(`${this.serviceURL}/${task._id}`, task);\n  }\n\n  completeTask(task: Task): Observable<Task> {\n    task.status = true; // Mark the task as completed\n    return this.editTask(task); // Send a PUT request to update the task\n  }\n\n  incompleteTask(task: Task): Observable<Task> {\n    task.status = false; // Mark the task as incomplete\n    return this.editTask(task); // Send a PUT request to update the task\n  }\n\n  getCompletedTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(`${this.serviceURL}?status=true`);\n  }\n\n  getIncompleteTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(`${this.serviceURL}?status=false`);\n  }\n  deleteCompletedTask(task: Task): Observable<Task> {\n    return this.http.delete<Task>(`${this.serviceURL}/${task._id}`);\n  }\n\n  // Function to delete an incomplete task\n  deleteIncompleteTask(task: Task): Observable<Task> {\n    return this.http.delete<Task>(`${this.serviceURL}/${task._id}`);\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACtB;IACA,IAAI,CAACC,UAAU,GAAG,6BAA6B;EACjD;EAEAC,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAO,GAAG,IAAI,CAACH,UAAU,EAAE,EAAEE,IAAI,CAAC;EACzD;EAEA;EACA;EACA;EAEAE,UAAUA,CAACF,IAAU;IACnB,OAAO,IAAI,CAACH,IAAI,CAACM,MAAM,CAAO,GAAG,IAAI,CAACL,UAAU,IAAIE,IAAI,CAACI,GAAG,EAAE,CAAC;EACjE;EAEAC,QAAQA,CAACL,IAAU;IACjB,OAAO,IAAI,CAACH,IAAI,CAACS,GAAG,CAAO,GAAG,IAAI,CAACR,UAAU,IAAIE,IAAI,CAACI,GAAG,EAAE,EAAEJ,IAAI,CAAC;EACpE;EAEAO,YAAYA,CAACP,IAAU;IACrBA,IAAI,CAACQ,MAAM,GAAG,IAAI,CAAC,CAAC;IACpB,OAAO,IAAI,CAACH,QAAQ,CAACL,IAAI,CAAC,CAAC,CAAC;EAC9B;;EAEAS,cAAcA,CAACT,IAAU;IACvBA,IAAI,CAACQ,MAAM,GAAG,KAAK,CAAC,CAAC;IACrB,OAAO,IAAI,CAACH,QAAQ,CAACL,IAAI,CAAC,CAAC,CAAC;EAC9B;;EAEAU,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAS,GAAG,IAAI,CAACb,UAAU,cAAc,CAAC;EAChE;EAEAc,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACf,IAAI,CAACc,GAAG,CAAS,GAAG,IAAI,CAACb,UAAU,eAAe,CAAC;EACjE;EACAe,mBAAmBA,CAACb,IAAU;IAC5B,OAAO,IAAI,CAACH,IAAI,CAACM,MAAM,CAAO,GAAG,IAAI,CAACL,UAAU,IAAIE,IAAI,CAACI,GAAG,EAAE,CAAC;EACjE;EAEA;EACAU,oBAAoBA,CAACd,IAAU;IAC7B,OAAO,IAAI,CAACH,IAAI,CAACM,MAAM,CAAO,GAAG,IAAI,CAACL,UAAU,IAAIE,IAAI,CAACI,GAAG,EAAE,CAAC;EACjE;EAAC,QAAAW,CAAA,G;qBAjDUpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXzB,WAAW;IAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}